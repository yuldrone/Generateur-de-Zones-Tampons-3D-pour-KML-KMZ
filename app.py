# app.py
import streamlit as st
import os
import tempfile

# Importer les fonctions de votre script de logique
from processing_logic import (
    parse_buffer_size,
    process_kml_file
)

# --- Configuration de la page Streamlit ---
st.set_page_config(
    page_title="G√©n√©rateur de Tampons 3D KML",
    page_icon="üåê",
    layout="wide"
)

# --- Interface Utilisateur ---
st.title("üåê G√©n√©rateur de Zones Tampons 3D pour KML/KMZ")
st.write("""
Cette application g√©n√®re des zones tampons 3D (polygones √©tag√©s) autour des polygones contenus dans un fichier KML ou KMZ.
Uploadez un fichier, d√©finissez les param√®tres et t√©l√©chargez le r√©sultat.
""")

col1, col2 = st.columns(2)
with col1:
    st.header("1. Uploader votre fichier")
    uploaded_file = st.file_uploader("Choisissez un fichier KML ou KMZ", type=['kml', 'kmz'])

with col2:
    st.header("2. D√©finir les param√®tres")
    buffer_sizes_str = st.text_area("Tailles de tampon (une par ligne)", "10m\n50m\n0.1km", help="Exemples : 10m, 0.5km, 2nm, 100ft")
    with st.expander("Param√®tres avanc√©s"):
        num_altitudes = st.slider("Nombre de niveaux d'altitude (pr√©cision 3D)", min_value=2, max_value=50, value=10, help="Plus le nombre est √©lev√©, plus le rendu 3D est lisse.")
        max_altitude_str = st.text_input("Altitude maximale (en m√®tres)", "", help="Optionnel. Laissez vide pour aucune limite.")
        merge_buffers = st.checkbox("Fusionner les zones tampons qui se chevauchent", value=True)

st.header("3. Lancer le traitement")
if st.button("G√©n√©rer le fichier KML"):
    if uploaded_file is None:
        st.error("‚ùå Veuillez d'abord uploader un fichier.")
    else:
        user_inputs = [line.strip() for line in buffer_sizes_str.split('\n') if line.strip()]
        buffer_sizes_km, valid_inputs = [], []
        for u_input in user_inputs:
            try:
                buffer_sizes_km.append(parse_buffer_size(u_input))
                valid_inputs.append(u_input)
            except ValueError:
                st.warning(f"‚ö†Ô∏è Taille invalide ignor√©e : '{u_input}'")

        if not buffer_sizes_km:
            st.error("‚ùå Aucune taille de tampon valide n'a √©t√© fournie.")
        else:
            with st.spinner('Traitement en cours...'):
                try:
                    with tempfile.TemporaryDirectory() as temp_dir:
                        input_path = os.path.join(temp_dir, uploaded_file.name)
                        with open(input_path, "wb") as f: f.write(uploaded_file.getbuffer())

                        max_altitude_m = float('inf')
                        if max_altitude_str.strip():
                            try: max_altitude_m = float(max_altitude_str)
                            except ValueError: st.warning("Altitude maximale invalide, ignor√©e.")

                        st.info(f"Fichier d'entr√©e : {uploaded_file.name}")
                        st.info(f"Tailles demand√©es : {', '.join(valid_inputs)}")
                        
                        process_kml_file(
                            input_kml_path=input_path,
                            buffer_sizes_km=buffer_sizes_km,
                            user_inputs=valid_inputs,
                            num_altitudes=num_altitudes,
                            max_altitude_m=max_altitude_m,
                            merge_buffers=merge_buffers
                        )
                        
                        base_name = os.path.splitext(uploaded_file.name)[0]
                        output_filename = f"{base_name}_zones_tampons_3d.kml"
                        output_path = os.path.join(temp_dir, output_filename)

                        if os.path.exists(output_path):
                            st.success("‚úÖ Traitement termin√© !")
                            with open(output_path, "r", encoding='utf-8') as f:
                                kml_output_data = f.read()
                            st.download_button(
                                label="üì• T√©l√©charger le fichier KML r√©sultat",
                                data=kml_output_data,
                                file_name=output_filename,
                                mime="application/vnd.google-earth.kml+xml"
                            )
                        else:
                            st.error("‚ùå Erreur : Le fichier de sortie n'a pas √©t√© g√©n√©r√©.")
                except Exception as e:
                    st.error(f"Une erreur critique est survenue : {e}")
